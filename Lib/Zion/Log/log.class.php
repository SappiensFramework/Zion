<?php/****    Sappiens Framework*    Copyright (C) 2014, BRA Consultoria**    Website do autor: www.braconsultoria.com.br/sappiens*    Email do autor: sappiens@braconsultoria.com.br**    Website do projeto, equipe e documentação: www.sappiens.com.br*   *    Este programa é software livre; você pode redistribuí-lo e/ou*    modificá-lo sob os termos da Licença Pública Geral GNU, conforme*    publicada pela Free Software Foundation, versão 2.**    Este programa é distribuído na expectativa de ser útil, mas SEM*    QUALQUER GARANTIA; sem mesmo a garantia implícita de*    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM*    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais*    detalhes.* *    Você deve ter recebido uma cópia da Licença Pública Geral GNU*    junto com este programa; se não, escreva para a Free Software*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA*    02111-1307, USA.**    Cópias da licença disponíveis em /Sappiens/_doc/licenca**/include_once($_SESSION['FMBase'] . 'conexao.class.php');include_once($_SESSION['FMBase'] . 'parse_sql.class.php');class Log extends ParseSql{    private $Cod, $Acao, $Tabela, $Modulo;    private $Con;    public function Log()    {        //Instancia Conexão        $this->Con = Conexao::conectar();        //Incia Interceptação        $this->Con->setInterceptaSql(true);        //Seta Módulo        $this->setModulo(MODULO);    }    /**     * 	Verifica se determinando valor é persistente no banco de dados     * 	@param Modulo String - Módulo do Sistema que representa o LOG     * 	@param Acao String - Tipo de Ação que será garavada     * 	@param Sql String - Script SQL que foi executado     * 	@return Booleano     */    public function geraLog($Cod)    {        //Dados do módulo        $DadosModulo = $this->dadosModulo();        //Código Hash        $Hash = $Cod . md5($Cod . mt_rand());        //Array de Sqls	        $ArraySql = $this->Con->getConteinerSql();        foreach ($ArraySql as $OcultoSN => $ArrayOcultoSN)        {            $LogOculto = ($OcultoSN == 'OcultoSim') ? 'S' : 'N';            if (is_array($ArrayOcultoSN))            {                foreach ($ArrayOcultoSN as $Sql)                {                    //Instrução Sql                    $Sql = trim($Sql);                    $Sql = str_replace(array("\n", "\r", "\t"), '', $Sql);                    $Sql = preg_replace("/[ ]{2,}/",' ',$Sql);                                        $ArrayParse = $this->parseStringSql($Sql);                    //Trata Instrucao                    $Instrucao = str_replace("'", '', $Sql);                    //Sql de Log				                    $SqlLog = "INSERT  INTO                             _log (UsuarioCod, ModuloCod, OpcoesModuloCod, InstrucaoSql,                                   SqlInterpretado, Tabela, Cod, Hash, Ip, DataLog, Acao, LogOculto)                         VALUES  (" . $_SESSION['UsuarioCod'] . ",                         " . $DadosModulo['ModuloCod'] . ",                         " . $DadosModulo['OpcoesModuloCod'] . ",                        '" . $Instrucao . "',                        '" . $ArrayParse['Array'] . "',                         '" . $ArrayParse['Tabela'] . "',                         " . $Cod . ",                         '" . $Hash . "',                         '" . $this->getIp() . "',                         now(),                        '" . $this->Acao . "',                        '" . $LogOculto . "')";                    try                    {                        $this->Con->executar($SqlLog);                    }                    catch (Exception $E1)                    {                        try                        {                            $this->gravaLogErros($SqlLog, $E1->getMessage());                        }                        catch (Exception $E2)                        {                            //fica triste e envia um e-mail                            @mail('pablovanni@gmail.com',ConfigSIS::$CFG['TituloAdm'],'Erro No Sistema: '.$E2->getMessage());                        }                    }                }            }        }        //Reseta Instruções de Log        $this->Con->resetlog();    }    //Seta o Módulo    public function setModulo($Modulo)    {        $this->Modulo = $Modulo;    }    //Recupera o IP    public function getIp()    {        //Pega o endereço IP do Usuário        $Ip = (getenv('HTTP_X_FORWARDED_FOR')) ? getenv('HTTP_X_FORWARDED_FOR') : getenv('REMOTE_ADDR');        return $Ip;    }    //Extrai os Dados do Módulo    public function dadosModulo()    {        $Opcao = $_GET['Op'];        $Modulo = $this->Modulo;        $Sql = "SELECT a.ModuloCod, b.OpcoesModuloCod 				FROM   _modulos a INNER JOIN _opcoes_modulo b 					   ON (a.ModuloCod   = b.ModuloCod AND 					   	   a.ModuloNome  = '$Modulo'   AND 					   	   b.IdPermissao = '$Opcao')";        return $this->Con->execLinha($Sql);    }    //Seta o Código do Regitro - Principal    public function setCod($Valor)    {        $this->Cod = $Valor;    }    //Seta a Ação que esta sendo realizada    public function setAcao($Valor)    {        $this->Acao = $Valor;    }    //Gerencia o Parse da String Sql    public function parseStringSql($Sql)    {        $Sql = $Sql;        if (empty($Sql))            throw new Exception("A String Sql esta vazia");        //Define Tipo        $Tipo = $this->defineTipoSql($Sql);        //Retorna convertido        switch ($Tipo)        {            case "INSERT" : $this->setAcao("Cad");                return $this->parseInsert($Sql);                break;            case "REPLAC" : $this->setAcao("Cad");                return $this->parseInsert($Sql);                break;            case "UPDATE" : $this->setAcao("Alt");                return $this->parseUpdate($Sql);                break;            case "DELETE" : $this->setAcao("Del");                return $this->parseDelete($Sql);                break;            default: return "";            //default: throw new Exception("Instrução Sql de Log Inválida: $Tipo");        }    }    //Define o Tipo de Intrução Sql que esta sendo interpretada    public function defineTipoSql($Sql)    {        return strtoupper(substr($Sql, 0, 6));    }    //Grava Log de Erros    public function gravaLogErros($Sql, $Excessao = '')    {        $Instrucao = trim(str_replace("'", '', $Sql));        $Excessao = trim(str_replace("'", '', $Excessao));        $this->Con->executar("INSERT INTO _log_erros 							 (ModuloCod, UsuarioCod, InstrucaoSql,DataLog,Ip, Excessao)							 VALUES 							 ('" . $this->Modulo . "','" . $_SESSION['UsuarioCod'] . "',							 '" . $Instrucao . "',now(),'" . $this->getIp() . "',							 '" . $Excessao . "')");    }}