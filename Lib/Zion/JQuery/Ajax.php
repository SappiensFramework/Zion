<?php/****    Sappiens Framework*    Copyright (C) 2014, BRA Consultoria**    Website do autor: www.braconsultoria.com.br/sappiens*    Email do autor: sappiens@braconsultoria.com.br**    Website do projeto, equipe e documentação: www.sappiens.com.br*   *    Este programa é software livre; você pode redistribuí-lo e/ou*    modificá-lo sob os termos da Licença Pública Geral GNU, conforme*    publicada pela Free Software Foundation, versão 2.**    Este programa é distribuído na expectativa de ser útil, mas SEM*    QUALQUER GARANTIA; sem mesmo a garantia implícita de*    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM*    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais*    detalhes.* *    Você deve ter recebido uma cópia da Licença Pública Geral GNU*    junto com este programa; se não, escreva para a Free Software*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA*    02111-1307, USA.**    Cópias da licença disponíveis em /Sappiens/_doc/licenca**/namespace Zion\JQuery;class Ajax{    private $config;    private $type;    private $definicoes;    private $complementos;    public function __construct()    {        $this->definicoes = [            'url',            'accepts',            'async',            'beforeSend',            'cache',            'complete',            'contents',            'contentType',            'context',            'crossDomain',            'data',            'dataFilter',            'dataType',            'error',            'global',            'headers',            'ifModified',            'isLocal',            'jsonp',            'jsonpCallback',            'mimeType',            'password',            'processData',            'scriptCharset',            'statusCode',            'success',            'timeout',            'traditional',            'username'        ];        $this->complementos = [            'done',            'fail',            'always'        ];    }    /**     * Retorna um objeto para configuração para requisições ajax do tipo GET     * @return \Zion\JQuery\AjaxVO     */    public function get()    {        $this->type = 'get';        $this->config = new AjaxVO($this);        return $this->config;    }    /**     * Retorna um objeto para configuração para requisições ajax do tipo JSON     * @return \Zion\JQuery\AjaxVO     */    public function getJSON()    {        $this->type = 'get';        $this->config = new AjaxVO($this);        $this->config->setDataType('json');        return $this->config;    }    /**     * Retorna um objeto para configuração para requisições ajax do tipo SCRIPT     * @return \Zion\JQuery\AjaxVO     */    public function getScript()    {        $this->type = 'post';        $this->config = new AjaxVO($this);        $this->config->setDataType('script');        return $this->config;    }    /**     * Retorna um objeto para configuração para requisições ajax do tipo POST     * @return \Zion\JQuery\AjaxVO     */    public function post()    {        $this->type = 'post';        $this->config = new AjaxVO($this);        return $this->config;    }    /**     * Cria uma instruçao do tipo load em javascript/jquery     * @param string $container     * @param string $url     * @param string $funcaoAoCompletar     * @return string     */    public function load($container, $url, $funcaoAoCompletar = '')    {        $aoCompletar = $funcaoAoCompletar ? ',' . $funcaoAoCompletar : '';        return ' $("#' . $container . '").load("' . $url . $aoCompletar . '"); ';    }    /**     * Gera uma função javascript de acordo com as configurações setadas no      * objeto de configuração \Zion\JQuery\AjaxVO     * @return string     */    public function criar()    {        $arrayConf = [            'definicoes' => [],            'complementos' => []];        $semAspas = ['data', 'beforeSend', 'error'];        $arrayConf['definicoes'][] = 'type:"' . $this->type . '"';        foreach ($this->definicoes as $nomeDefinicao) {            $metodo = 'get' . $nomeDefinicao;            $conteudoGet = $this->config->{$metodo}();            if ($conteudoGet) {                if (in_array($nomeDefinicao, $semAspas)) {                    $arrayConf['definicoes'][] = $nomeDefinicao . ':' . $conteudoGet;                } else {                    $arrayConf['definicoes'][] = $nomeDefinicao . ':"' . $conteudoGet . '"';                }            }        }        foreach ($this->complementos as $nomeComplemento) {            $metodo = 'get' . $nomeComplemento;            $conteudoGet = $this->config->{$metodo}();            if ($conteudoGet) {                $arrayConf['complementos'][] = '.' . $nomeComplemento . '(function(ret) {' . $conteudoGet . '})';            }        }        $strAjax1 = ' $.ajax({ ' . implode(', ', $arrayConf['definicoes']) . ' })';        $strAjax2 = implode('', $arrayConf['complementos']) . '; ';        $funcao = $this->config->getFuncao();        if ($funcao) {            $final = ' function ' . str_ireplace(['{', '}', 'function'], '', $funcao) . '{' . $strAjax1 . $strAjax2 . ' } ';        } else {            $final = $strAjax1 . $strAjax2;        }        //Renova a Instancia de VO        $this->config = new AjaxVO($this);        return $final;    }}