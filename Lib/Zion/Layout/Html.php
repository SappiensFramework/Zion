<?php/****    Sappiens Framework*    Copyright (C) 2014, BRA Consultoria**    Website do autor: www.braconsultoria.com.br/sappiens*    Email do autor: sappiens@braconsultoria.com.br**    Website do projeto, equipe e documentação: www.sappiens.com.br*   *    Este programa é software livre; você pode redistribuí-lo e/ou*    modificá-lo sob os termos da Licença Pública Geral GNU, conforme*    publicada pela Free Software Foundation, versão 2.**    Este programa é distribuído na expectativa de ser útil, mas SEM*    QUALQUER GARANTIA; sem mesmo a garantia implícita de*    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM*    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais*    detalhes.* *    Você deve ter recebido uma cópia da Licença Pública Geral GNU*    junto com este programa; se não, escreva para a Free Software*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA*    02111-1307, USA.**    Cópias da licença disponíveis em /Sappiens/_doc/licenca**//** * \Zion\Layout\Html() *  * @author The Sappiens Team * @copyright 2014 * @version 2014 * @access public */ namespace Zion\Layout;class Html{    /**     * Html::abreTagAberta()     *      * @param mixed $tag     * @param mixed $atributos     * @param mixed $complementos     * @return     */    public function abreTagAberta($tag, array $atributos = array(), array $complementos = array())    {        $attr = vsprintf(str_repeat('%s ', count($atributos)), $this->montaAtributos($atributos));        $comp = vsprintf(str_repeat('%s ', count($complementos)), $this->montaComplementos($complementos));        return '<' . $tag . ' ' . $attr . $comp . '>' . "\n";    }    /**     * Html::abreTagFechada()     *      * @param mixed $tag     * @param mixed $atributos     * @param mixed $complementos     * @return     */    public function abreTagFechada($tag, array $atributos = array(), array $complementos = array())    {        $attr = vsprintf(str_repeat('%s ', count($atributos)), $this->montaAtributos($atributos));        $comp = vsprintf(str_repeat('%s ', count($complementos)), $this->montaComplementos($complementos));        return '<' . $tag . ' ' . $attr . $comp . '></' .$tag . '>' . "\n";    }        /**     * Html::entreTags()     *      * @param mixed $tag     * @param mixed $texto     * @return     */    public function entreTags($tag, $texto)    {        return '<'.$tag.'>'.$texto.'</'.$tag.'>' . "\n";    }    /**     * Html::abreComentario()     *      * @return     */    public function abreComentario()    {        return '<!-- ';    }    /**     * Html::fechaComentario()     *      * @return     */    public function fechaComentario()    {        return ' -->' . "\n";    }    /**     * Html::montaAtributos()     *      * @param mixed $atributos     * @return     */    private function montaAtributos(array $atributos)    {        $ret = [];        foreach ($atributos as $attr => $valor) {            $ret[] = $attr . '=' . '"' . $valor . '"';        }        return $ret;    }    /**     * Html::montaComplementos()     *      * @param mixed $complementos     * @return     */    private function montaComplementos(array $complementos)    {        $ret = [];        foreach ($complementos as $attr => $valor) {            $ret[] = $valor;        }        return $ret;    }    /**     * Html::fechaTag()     *      * @param mixed $tag     * @return     */    public function fechaTag($tag)    {        return '</' . $tag . '>' . "\n";    }}