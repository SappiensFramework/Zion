<?php/** * *    Sappiens Framework *    Copyright (C) 2014, BRA Consultoria * *    Website do autor: www.braconsultoria.com.br/sappiens *    Email do autor: sappiens@braconsultoria.com.br * *    Website do projeto, equipe e documentação: www.sappiens.com.br *    *    Este programa é software livre; você pode redistribuí-lo e/ou *    modificá-lo sob os termos da Licença Pública Geral GNU, conforme *    publicada pela Free Software Foundation, versão 2. * *    Este programa é distribuído na expectativa de ser útil, mas SEM *    QUALQUER GARANTIA; sem mesmo a garantia implícita de *    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM *    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais *    detalhes. *  *    Você deve ter recebido uma cópia da Licença Pública Geral GNU *    junto com este programa; se não, escreva para a Free Software *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA *    02111-1307, USA. * *    Cópias da licença disponíveis em /Sappiens/_doc/licenca * */namespace Zion\Arquivo;class ManipulaDiretorio{    protected $ds;    public function __construct()    {        $this->ds = \DIRECTORY_SEPARATOR;    }    /**     * Retorna verdadeiro caso o arquivo exista e falso caso não     * @param string $local     * @return boolean     */    public function arquivoExiste($local)    {        return(\file_exists($local)) ? true : false;    }    /**     * Verifica se o caminho informado é um diretório válido     * @param string $dir     * @return boolean     */    public function eDiretorio($dir)    {        return \is_dir($dir) ? true : false;    }    /**     * Verifica se o caminho do diretório permite escrita     * @param type $arquivo     * @return boolean     */    public function permiteEscrita($arquivo)    {        return \is_writable(\dirname($arquivo)) ? true : false;    }    /**     * Cria um diretório com sua devida permissão     * @param string $dir | /home/htdocs/projeto     * @param int $permissao | 0777     * @return boolean     * @throws \Exception     */    public function criaDiretorio($dir, $permissao)    {        if ($this->eDiretorio($dir)) {            return true;        }        if (!@\mkdir($dir, $permissao)) {            throw new \Exception('Não foi possível criar o diretório!');        }        return true;    }    public function criaDiretorioRecursivo($diretorio, $permissao)    {        $dir = $this->padronizaDiretorio($diretorio, "/");        $paths = [];        if (!$this->eDiretorio($dir)) {            $paths = \split('/', $dir);        }        $partialPath = '';                if (\array_key_exists(0, $paths)) {            $partialPath = $paths[0];        }        if ($this->ds === '/') {            $partialPath = '/' . $paths[0];        }        $actualPath = 0;        while ($actualPath < \count($paths)) {            if (!$this->eDiretorio($partialPath)) {                $this->criaDiretorio($partialPath, $permissao);            }            $atual = ++$actualPath;            if (\array_key_exists($atual, $paths)) {                $partialPath .= $paths[$atual] . '/';            }        }    }    /**     * Remove arquivos de um diretório     * @param string $diretorio     * @param array $extensao - extensões que devem ser removidas     * @throws \Exception     */    public function apagaArquivos($diretorio, $extensao)    {        if (!$this->eDiretorio($diretorio)) {            throw new \Exception("O diretorio informado não é válido!!");        }        $abrir = \opendir($diretorio);        if (!$abrir) {            throw new \Exception("Não foi possivel abrir o diretorio!");        }        $tipos = \array_map("strtolower", $extensao);        while ($arquivo = \readdir($abrir)) {            if ($arquivo <> "." and $arquivo <> "..") {                $arq = \strtolower($arquivo);                $vetExt = \explode(".", $arq);                $ext = $vetExt[\count($vetExt) - 1];                if (\in_array($ext, $tipos)) {                    if (\is_file($diretorio . $arquivo)) {                        $this->removeArquivo($diretorio . $arquivo);                    }                }            }        }        \closedir($abrir);    }    /**     * Aplica permissão de pastas recursivamente     * @param string $diretorio     * @param int $permissao     * @throws \Exception     */    public function chmodRecursivo($diretorio, $permissao = 0777)    {        if (!$this->eDiretorio($diretorio)) {            throw new \Exception("O diretorio informado não é válido!!");        }        $aux = \strrev($diretorio);        if ($aux[0] != $this->ds) {            $diretorio.= $this->ds;        }        $chmod = \chmod($diretorio, $permissao);        if (!$chmod) {            throw new \Exception("Não foi possivel atribuir as permissões!");        }        $result = \scandir($diretorio);        if (!$result) {            throw new \Exception("Não foi possível ler o diretório!");        }        foreach ($result as $arquivo) {            $novoDiretorio = $diretorio . $arquivo;            if ($arquivo !== "." and $arquivo !== "..") {                if (\is_dir($novoDiretorio)) {                    $this->chmodRecursivo($novoDiretorio . "/", $permissao);                } else {                    \chmod($novoDiretorio, $permissao);                }            }        }    }    /**     * Retorna um array com os arquivos existentes em um diretório, se o      * segundo parametro $extensao for informado, então o metodo trará apenas     * as extensões contidas nele - Este método não é recursivo     * @param string $diretorio     * @param array $extensao     * @return array     * @throws \Exception     */    public function listaArquivos($diretorio, $extensao = [])    {        $abrir = \opendir($diretorio);        if (!$abrir) {            throw new \Exception("Não foi possivel abrir o diretorio!");        }        if ($extensao) {            $tipos = \array_map("strtolower", $extensao);        }        $arrayArq = [];        while ($arquivo = \readdir($abrir)) {            if ($arquivo <> "." and $arquivo <> "..") {                $arq = \strtolower($arquivo);                $vetExt = \explode(".", $arq);                $ext = $vetExt[\count($vetExt) - 1];                if ($extensao) {                    if (\in_array($ext, $tipos)) {                        $arrayArq[] = $arquivo;                    }                } else {                    $arrayArq[] = $arquivo;                }            }        }        return $arrayArq;    }    public function listaArquivosRecursivo($origem, $ext = [])    {        $iterator = new \DirectoryIterator($origem);        $buffer = [];        foreach ($iterator as $info) {            if ($info->isFile()) {                if ($ext and ! \in_array($this->extenssaoArquivo($info->getFilename()), $ext)) {                    continue;                }                $buffer[] = $origem . $this->ds . $info->getFilename();            } elseif (!$info->isDot()) {                $novoBuffer = $this->listaArquivosRecursivo($origem . $this->ds . $info->getFilename(), $ext);                $buffer = \array_merge($buffer, $novoBuffer);            }        }        return $buffer;    }    /**     * Remove um diretório completamente     * @param string $diretorio     * @return boolean     * @throws \Exception     */    public function removeDiretorioCompleto($diretorio)    {        if (\is_dir($diretorio)) {            $aux = \strrev($diretorio);            if ($aux[0] != $this->ds) {                $diretorio.= $this->ds;            }            $result = \scandir($diretorio);            if (!$result) {                throw new \Exception("Não foi possível ler o diretório!");            }            foreach ($result as $arquivo) {                $novoDiretorio = $diretorio . $arquivo;                if ($arquivo !== "." and $arquivo !== "..") {                    if (\is_file($novoDiretorio)) {                        $this->removeArquivo($novoDiretorio);                    } elseif (\is_dir($novoDiretorio)) {                        $this->removeDiretorioCompleto($novoDiretorio . $this->ds);                    }                }            }            $this->removeDiretorio($diretorio);            return true;        }        return false;    }    /**     * Remove o arquivo informado por parametro     * @param string $arquivo     * @throws \Exception     */    public function removeArquivo($arquivo)    {        if (!@\unlink($arquivo)) {            throw new \Exception("Não foi possivel remover o arquivo:" . $arquivo);        }    }    /**     * Remove um diretório informado por parametro     * @param string $dir     * @throws \Exception     */    public function removeDiretorio($dir)    {        if (!@\rmdir($dir)) {            throw new \Exception("Não foi possivel remover o diretorio:" . $dir);        }    }    public function copiarDiretorioRecursivo($origem, $destino)    {        $origemP = $this->padronizaDiretorio($origem);        $destinoP = $this->padronizaDiretorio($destino);        if (\is_file($origemP)) {                        return \copy($origemP, $destinoP);        }        if (!$this->eDiretorio($destinoP)) {            $this->criaDiretorio($destinoP, 0777);        }        $dir = \dir($origemP);        while (false !== ($entry = $dir->read())) {            if ($entry == '.' || $entry == '..') {                continue;            }            if ($destinoP !== "$origemP{$this->ds}$entry") {                $this->copiarDiretorioRecursivo("$origemP{$this->ds}$entry", "$destinoP{$this->ds}$entry");            }        }        $dir->close();    }    public function copiarDiretorio($origem, $destino)    {        if (\is_file($origem)) {            return \copy($origem, $destino);        }                $abrir = \opendir($origem);        if (!$abrir) {            throw new \Exception("Não foi possivel abrir o diretorio!");        }        while ($arquivo = \readdir($abrir)) {            if ($arquivo <> "." and $arquivo <> "..") {                                $aOrigem = $origem.$this->ds.$arquivo;                                if (\is_file($aOrigem)) {                    \copy($aOrigem, $destino.$this->ds.$arquivo);                }            }        }    }        public function padronizaDiretorio($dir, $separacao = '')    {        $barra = $separacao ? $separacao : $this->ds;        return \str_replace(['\\', '/'], $barra, $dir);    }}