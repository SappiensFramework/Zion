<?php/** * *    Sappiens Framework *    Copyright (C) 2014, BRA Consultoria * *    Website do autor: www.braconsultoria.com.br/sappiens *    Email do autor: sappiens@braconsultoria.com.br * *    Website do projeto, equipe e documentação: www.sappiens.com.br *    *    Este programa é software livre; você pode redistribuí-lo e/ou *    modificá-lo sob os termos da Licença Pública Geral GNU, conforme *    publicada pela Free Software Foundation, versão 2. * *    Este programa é distribuído na expectativa de ser útil, mas SEM *    QUALQUER GARANTIA; sem mesmo a garantia implícita de *    COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM *    PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais *    detalhes. *  *    Você deve ter recebido uma cópia da Licença Pública Geral GNU *    junto com este programa; se não, escreva para a Free Software *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA *    02111-1307, USA. * *    Cópias da licença disponíveis em /Sappiens/_doc/licenca * */namespace Pixel\Grid;use Zion\Banco\Conexao;use Zion\Paginacao\Paginacao;use Zion\Validacao\Valida;class GridPadrao{    private $con;    private $paginacao;    private $botoes;    private $modoImpressao;    private $grid;    /**     * @param \Zion\Banco\Conexao $con     */    public function __construct(Conexao $con = NULL)    {        $this->grid = new Grid();        $this->con = (!\is_object($con)) ? Conexao::conectar() : $this->con = $con;        $this->paginacao = new Paginacao($con);        $this->botoes = new GridBotoes();        $this->grid->setSelecaoMultipla(true);        //Padrões Iniciais        $this->grid->setTipoOrdenacao(\filter_input(\INPUT_GET, 'to'));        $this->grid->setQuemOrdena(\filter_input(\INPUT_GET, 'qo'));        $this->grid->setPaginaAtual(\filter_input(\INPUT_GET, 'pa'));        $this->grid->setQLinhas(\SIS_LINHAS_GRID);    }    private function tituloGridPadrao()    {        $buffer = [];        $colunas = $this->grid->getColunas();        $selecao = $this->grid->getSelecao();        $buffer['selecao'] = $selecao;        //Titulos        foreach ($colunas as $coluna => $titulo) {            $alinhamento = $this->grid->getAlinhamento($coluna);            if ($alinhamento) {                $buffer['alinhamento'][$coluna] = $this->grid->getAlinhamento($coluna);            }            $buffer['titulo'][$coluna] = $this->grid->ordena($titulo, $coluna);        }                return $buffer;    }    /**     * 	Contrução da Grid de Dados     * 	@param Opcoes Array - Indica se cada item deve ser habilitado     * 	@param QLinhas Inteiro - NÃºmero de Resultados por pagina     * 	@param PaginaAtual Inteiro - NÃºmero da Pagina Atual     * 	@param Parametros String - Query String com parametros nescessarios      * 	@return String     */    public function montaGridPadrao()    {        //Modo de impresssão        $this->modoImpressao = false;        if (\filter_input(\INPUT_GET, 'sisModoImpressao')) {            $this->modoImpressao = true;            $this->grid->setQLinhas(0);            $this->setSelecao(false);        }        $buffer = [];        $bufferTitulo = $this->tituloGridPadrao();        //Recupera Valores        $sql = $this->grid->getSql();        $tabelaMestra = $this->grid->getTabelaMestra();        $sqlContador = $this->grid->getSqlContador();        $filtroAtivo = $this->grid->getFiltroAtivo();        $limitAtivo = $this->grid->getLimitAtivo();        $listados = \array_keys($this->grid->getColunas());        $chave = $this->grid->getChave();        $aliasOrdena = $this->grid->getAliasOrdena();        $formatarComo = $this->grid->getFormatarComo();        $selecao = $this->grid->getSelecao();        $selecaoMultipla = $this->grid->getSelecaoMultipla();        $qLinhas = $this->grid->getQLinhas();                $this->paginacao->setSql($sql);        //Verifica se o SQL não esta Vazio        if (empty($sql)) {            throw new \Exception("Valor selecionado inválido!");        }        if($this->getLog() === true and SIS_RELEASE !== "Developer"){            $log = new \Zion\Log\Log();            $log->registraLogUsuario($_SESSION['usuarioCod'], MODULO, 'filtrar', $this->grid->getSql());        }                //Se FormataÃ§Ãµes existem, intancie funÃ§Ãµes de ValidaÃ§Ã£o        if (!empty($formatarComo)) {            $fPHP = Valida::instancia();        }        $buffer['chave'] = $chave;                $buffer['selecao']['selecao'] = $selecao;        $buffer['selecao']['selecaoMultipla'] = $selecaoMultipla;        //Monta PaginanaÃ§Ã£o        if ($qLinhas > 0) {            //Setando Valores para paginaÃ§Ã£o            $this->paginacao->setTabelaMestra($tabelaMestra);            $this->paginacao->setSqlContador($sqlContador);            $this->paginacao->setFiltroAtivo($filtroAtivo);            $this->paginacao->setLimitAtivo($limitAtivo);            $this->paginacao->setChave($chave);            $this->paginacao->setAliasOrdena($aliasOrdena);            $this->paginacao->setQLinhas($qLinhas);            $this->paginacao->setProcessarNumeroPaginas($this->grid->getProcessarNumeroPaginas());            $this->paginacao->setPaginaAtual($this->grid->getPaginaAtual());            $this->paginacao->setTipoOrdenacao($this->grid->getTipoOrdenacao());            $this->paginacao->setQuemOrdena($this->grid->getQuemOrdena());            $this->paginacao->setMetodoFiltra($this->grid->getMetodoFiltra());            $this->paginacao->setAlterarLinhas($this->grid->getAlterarLinhas());            $rs = $this->paginacao->rsPaginado();        } else {            if (\is_string($sql)) {                $rs = $this->con->executar($sql);            } else {                $rs = $sql->execute();            }        }        $nLinhas = $this->con->nLinhas($rs);                //Contruindo grid        if ($nLinhas > 0) {            $buffer['paginacao'] = $this->paginacao->listaResultados();            $subs = $this->grid->getSubstituirPor();            $objC = $this->grid->getObjetoConverte();            $eRU = $this->grid->getCondicaoResultadoUnico();            $eTR = $this->grid->getCondicaoTodosResultados();            $i = 0;            while ($linha = $rs->fetch()) {                $i += 1;                $cRT = "";                if (\is_array($eTR)) {                    foreach ($eTR as $rT) {                        if ($this->grid->resultadoEval($linha, array($rT[0])) === true) {                            $cRT = $rT[1];                        }                    }                }                                foreach ($listados as $value) {                    //Valor com possivel converssão                    if (\is_array($objC) and \key_exists($value, $objC)) {                        $valorItem = $this->grid->converteValor($linha, $objC[$value]);                    } else {                        if(!\array_key_exists($value, $linha)){                            throw new \Exception('Grid: Valor '.$value.' n�o encontrado!');                        }                        $valorItem = $linha[$value];                    }                    //Formata��o                    if (!empty($formatarComo)) {                        if (\array_key_exists($value, $formatarComo)) {                            $como = \strtoupper($formatarComo[$value]);                            switch ($como) {                                case "DATA" : $valorItem = $fPHP->data()->converteData($valorItem);                                    break;                                case "DATAHORA": $valorItem = $fPHP->data()->converteDataHora($valorItem);                                    break;                                case "NUMERO" : $valorItem = $fPHP->numero()->floatCliente($valorItem);                                    break;                                case "MOEDA" : $valorItem = $fPHP->numero()->moedaCliente($valorItem);                                    break;                            }                        }                    }                    //Valor com possivel stituicao                    if (\is_array($subs) and \key_exists($value, $subs)) {                        if (\key_exists($valorItem, $subs[$value])) {                            $valorItem = $subs[$value][$valorItem];                        } else {                            if ($valorItem == '') {                                $valorItem = \current($subs[$value]);                            }                        }                    }                    //Estilo de Resultado �nico                    $cRU = "";                    if (\is_array($eRU) and \key_exists($value, $eRU)) {                        if ($this->grid->resultadoEval($linha, $eRU[$value]) === true) {                            $cRU = $eRU[$value][1];                        }                    }                    $buffer['valores'][$linha[$chave]][$value] = $valorItem;                                    }            }        }        return \array_merge($bufferTitulo, $buffer);    }#####################################################################    public function setTipoOrdenacao($valor)    {        $this->grid->setTipoOrdenacao($valor);    }    public function setQuemOrdena($valor)    {        $this->grid->setQuemOrdena($valor);    }    public function setSql($valor)    {        $this->grid->setSql($valor);    }    public function setSqlContador($valor)    {        $this->grid->setSqlContador($valor);    }    public function setFiltroAtivo($valor)    {        $this->grid->setFiltroAtivo($valor);    }    public function setLimitAtivo($valor)    {        $this->grid->setLimitAtivo($valor);    }    public function setChave($valor)    {        $this->grid->setChave($valor);    }    public function setAliasOrdena($valor)    {        $this->grid->setAliasOrdena($valor);    }    public function setMetodoFiltra($valor)    {        $this->grid->setMetodoFiltra($valor);    }    public function setQLinhas($valor)    {        $this->grid->setQLinhas($valor);    }    public function setPaginaAtual($valor)    {        $this->grid->setPaginaAtual($valor);    }    public function setIrParaPagina($valor)    {        $this->grid->setIrParaPagina($valor);    }    public function setAlterarLinhas($valor)    {        $this->grid->setAlterarLinhas($valor);    }    /**     * Monta um array representativo das colunas da tabela de um banco de dados.     * Por questÃµes de compatibilidade as colunas serÃ£o convertidas      * automaticamente para minisculo     * @param array $arrayColunas     * @throws \Exception     */    public function setColunas($arrayColunas)    {        $this->grid->setColunas($arrayColunas);    }    /**     * Monta um array com informaÃ§Ãµes de alinhamento de campos, pode alinhar um     * ou mais campos     * setAlinhamento(['campo1'=>'Esquerda', 'campo2'=>'Centro'],'campo3'=>'Direita');     * @param array $arrayAlinhamento     * @throws \Exception     */    public function setAlinhamento($arrayAlinhamento)    {        $this->grid->setAlinhamento($arrayAlinhamento);    }    public function setCondicaoResultadoUnico($campo, $condicao, $class)    {        $this->grid->setCondicaoResultadoUnico($campo, $condicao, $class);    }    public function setCondicaoTodosResultados($condicao, $class)    {        $this->grid->setCondicaoTodosResultados($condicao, $class);    }    /**     * Usa um objeto, um metodos e a indicaÃ§Ã£o de como usa-los, com a funÃ§Ã£o     * de converter um resultado da grid.     *      * $grid->converterResultado($this, 'mostraIcone', 'moduloClass', ['moduloClass']);     *      * @param object $objeto     * @param string $metodo     * @param string $campo     * @param array $parametrosInternos     * @param array $paremetrosExternos     * @param string $ordem     * @throws \Exception     */    public function converterResultado($objeto, $metodo, $campo, $parametrosInternos = [], $paremetrosExternos = [], $ordem = 'IE')    {        $this->grid->converterResultado($objeto, $metodo, $campo, $parametrosInternos, $paremetrosExternos, $ordem);    }    /**     * Monta um array com informaÃ§Ãµes de ordenaÃ§Ã£o de campos, pode ordenar um     * ou mais campos     *      * $grid->naoOrdenePor(['moduloClass']);     *      * @param array $arrayNaoOrdenePor     * @throws \Exception     */    public function naoOrdenePor($arrayNaoOrdenePor)    {        $this->grid->naoOrdenePor($arrayNaoOrdenePor);    }    /**     * Formata um resultado da grid, pode ser (DATA, DATAHORA, NUMERO, MOEDA)     *      * $grid->setFormatarComo('moduloClass','DATA');     *      * @param string $identificacao     * @param string $como     * @throws \Exception     */    public function setFormatarComo($identificacao, $como)    {        $this->grid->setFormatarComo($identificacao, $como);    }    /**     * Indica se a grid deve apresentar checkbox ou radiobox de seleÃ§Ã£o      * de resultados     * @param bool $selecao     */    public function setSelecao($selecao)    {        $this->grid->setSelecao($selecao);    }    /**     * Por padrÃ£o a seleÃ§Ã£o multipla Ã© verdadeira, no caso de setar false para      * este metodo a grid irÃ¡ trazer radios para a seleÃ§Ã£o de resultados.     * @param bool $selecaoMultipla     */    public function setSelecaoMultipla($selecaoMultipla)    {        $this->grid->setSelecaoMultipla($selecaoMultipla);    }    /**     * Substitui um valor da grid por um valor equivalente em um array     *      * $grid->substituaPor('moduloVisivelMenu', ['S' => 'Sim', 'N' => 'NÃ£o']);     *      * @param string $identificacao     * @param string $por     * @throws \Exception     */    public function substituaPor($identificacao, $por)    {        $this->grid->substituaPor($identificacao, $por);    }    public function setProcessarNumeroPaginas($valor)    {        $this->grid->setProcessarNumeroPaginas($valor);    }    public function getLog()     {        return $this->grid->getLog();    }    public function setLog($log)     {        return $this->grid->setLog($log);    }        public function getRegistroLogado()     {        return self::$registroLogado;    }    public function setRegistroLogado($value)     {        if(!isset(self::$registroLogado)){            self::$registroLogado = $value;        }        return $this;    }}